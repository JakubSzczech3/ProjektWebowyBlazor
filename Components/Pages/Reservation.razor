@page "/reservation"
@rendermode InteractiveServer
@inject AppDbContext DbContext
@inject SesClass Session
@inject NavigationManager NavMag
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms


<style>
    .container {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 20px;
        margin-top: 50px;
    }

    #reserve, #reservations {
        width: 45%;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #FA8072;
    }

    @@media (max-width: 640px) {
        .container {
            flex-direction: column;
            align-items: center;
        }

        ##reserve, #reservation {
            width: 90%;
            max-width: 400px;
        }
    }



    button {
        padding: 10px;
        background-color: #8B0000;
        color: white;
        font-size: 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        button:hover {
            background-color: #DC143C;
        }

    .alert {
        margin-top: 20px;
        padding: 10px;
        color: white;
        background-color: #FF0000;
        border-radius: 4px;
    }


    .page {
        position: relative;
        display: flex;
        flex-direction: column;
    }

    main {
        flex: 1;
    }

    .sidebar {
        background-image: linear-gradient(180deg, rgb(109, 5, 255) 10%, #800080 70%);
    }

    .top-row {
        background-color: #808080;
        border-bottom: 1px solid #eb6a6a;
        justify-content: flex-end;
        height: 1.5rem;
        display: flex;
        align-items: center;
    }

        .top-row ::deep a, .top-row ::deep .btn-link {
            white-space: nowrap;
            margin-left: 1.5rem;
            text-decoration: none;
        }

            .top-row ::deep a:hover, .top-row ::deep .btn-link:hover {
                text-decoration: underline;
            }

            .top-row ::deep a:first-child {
                overflow: hidden;
                text-overflow: ellipsis;
            }

</style>

<div class="container">
<div id="reserve">
<h3>Reservation</h3>

@if (Session.Users.Id == 0)
{
    <p class="alert alert-warning">You have to be logged to reserve room.</p>
}

else
{
    <p>
        Select start date:
        <InputDate @bind-Value="selectedStartDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
    </p>

    <p>
        Select end date:
        <InputDate @bind-Value="selectedEndDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
    </p>

    <button @onclick="AssignRoom">Reserve</button>

    @if (assignedRoom != null)
    {
        <p>Room number @assignedRoom.room_number is reserve from @selectedStartDate.ToString("yyyy-MM-dd") to @selectedEndDate.ToString("yyyy-MM-dd").</p>
    }
    else
    {
        <p>No available rooms in this time preiod .</p>
    }
}
</div>
<div id="reservations">
<h4>Your reservations</h4>

@if (userReservations.Any())
{
    <ul>
        @foreach (var reservation in userReservations)
        {
            <li>
                From: @reservation.st_date.ToString("yyyy-MM-dd") | To: @reservation.fn_date.ToString("yyyy-MM-dd")
                <button @onclick="() => CancelReservation(reservation.Id)">Cancel</button>
            </li>
        }
    </ul>
}
else
{
    <p>You don't have any reservations.</p>
}
</div>
</div>

@code {
    private DateTime selectedStartDate = DateTime.Today; 
    private DateTime selectedEndDate = DateTime.Today.AddDays(1); 
    private rooms? assignedRoom;
    private List<reservations> userReservations = new List<reservations>();
    protected override async Task OnInitializedAsync(){
        userReservations = await DbContext.Set<reservations>()
            .Where(r => r.client_id == Session.Users.Id) 
            .ToListAsync();
    }
    private async Task LoadUserReservations()
    {
        userReservations = await DbContext.Set<reservations>()
            .Where(r => r.client_id == Session.Users.Id) 
            .ToListAsync();
    }

    private async Task AssignRoom()
    {
        if (Session.Users.Id == 0)
        {
            assignedRoom = null;
            return;
        }

        if (selectedEndDate <= selectedStartDate)
        {
            assignedRoom = null;
            return;
        }

        var availableRoom = await GetAvailableRoomForDate(selectedStartDate, selectedEndDate);

        if (availableRoom != null)
        {
            assignedRoom = availableRoom;

            var reservation = new reservations
                {
                    client_id = Session.Users.Id, 
                    room_id = assignedRoom.Id,
                    st_date = selectedStartDate,
                    fn_date = selectedEndDate
                };

            DbContext.Set<reservations>().Add(reservation);
            await DbContext.SaveChangesAsync();
            await LoadUserReservations();
        }
        else
        {
            assignedRoom = null;
        }
    }

    private async Task<rooms?> GetAvailableRoomForDate(DateTime startDate, DateTime endDate)
    {
        var rooms = await DbContext.Set<rooms>().Where(r => r.room_status == "Available").ToListAsync();

        var reservations = await DbContext.Set<reservations>()
            .Where(r => (r.st_date < endDate && r.fn_date > startDate)) 
            .ToListAsync();

        var reservedRoomIds = reservations.Select(r => r.room_id).ToHashSet();

        return rooms.FirstOrDefault(r => !reservedRoomIds.Contains(r.Id));
    }
    private async Task CancelReservation(int reservationId)
    {
        var reservationToCancel = await DbContext.Set<reservations>()
            .Where(r => r.Id == reservationId && r.client_id == Session.Users.Id)
            .FirstOrDefaultAsync();

        if (reservationToCancel != null)
        {
            DbContext.Set<reservations>().Remove(reservationToCancel);
            await DbContext.SaveChangesAsync();

            await LoadUserReservations();
        }
    }
}