@page "/"
@rendermode InteractiveServer
@inject AppDbContext DbContext
@inject SesClass Session
@inject NavigationManager NavMag
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms


<PageTitle>Login</PageTitle>
<style>
    .container {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 20px;
        margin-top: 50px;
    }

    #logowanie, #register {
        width: 45%;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #FA8072;
    }


    @@media (max-width: 640px) {
        .container

    {
        flex-direction: column; 
        align-items: center; 
    }

    #logowanie, #register {
        width: 90%; 
        max-width: 400px; 
    }

    }

    h1 {
    text-align: center;
    font-size: 24px;
    }

    .form-group {
    margin-bottom: 15px;
    }

    .form-group label {
    font-weight: bold;
    }

    .form-group input {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-top: 5px;
    }

    .form-group input:focus {
    border-color: #8B0000;
    outline: none;
    }

    button {
    width: 100%;
    padding: 10px;
    background-color: #8B0000;
    color: white;
    font-size: 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    }

    button:hover {
    background-color: #DC143C;
    }

    .alert {
    margin-top: 20px;
    padding: 10px;
    color: white;
    background-color: #FF0000;
    border-radius: 4px;
    }

    .success-alert {
    margin-top: 20px;
    padding: 10px;
    color: white;
    background-color: #00FF00;
    border-radius: 4px;
    }

    .page {
    position: relative;
    display: flex;
    flex-direction: column;
    }

    main {
    flex: 1;
    }

    .sidebar {
    background-image: linear-gradient(180deg, rgb(109, 5, 255) 10%, #800080 70%);
    }

    .top-row {
    background-color: #808080;
    border-bottom: 1px solid #eb6a6a;
    justify-content: flex-end;
    height: 1.5rem;
    display: flex;
    align-items: center;
    }

    .top-row ::deep a, .top-row ::deep .btn-link {
    white-space: nowrap;
    margin-left: 1.5rem;
    text-decoration: none;
    }

    .top-row ::deep a:hover, .top-row ::deep .btn-link:hover {
    text-decoration: underline;
    }

    .top-row ::deep a:first-child {
    overflow: hidden;
    text-overflow: ellipsis;
    }




</style>

<div class="container">
    @if(@Session.Users.name == null){
        @if (!isLoggedIn)
        {
            <div id="logowanie">
                <h1>Login</h1>
                <EditForm Model="loginModel" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="login">Login:</label>
                        <InputText id="login" @bind-Value="loginModel.Login" />
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <InputText id="password" @bind-Value="loginModel.Password" />
                    </div>

                    <button type="submit">Login</button>
                </EditForm>

                @if (loginError)
                {
                    <div class="alert">
                        @if (wrongLogin)
                        {
                            <p>The login provided does not exist.</p>
                        }
                        else if (wrongPassword)
                        {
                            <p>The password provided is incorrect.</p>
                        }
                        else
                        {
                            <p>Invalid login or password.</p>
                        }
                    </div>
                }
            </div>
        }}
    else
    {
        <div class="success-alert">
            You have successfully logged in.
        </div>
    }

    <div id="register">
        <h1>Register</h1>
        <EditForm Model="newUser" OnValidSubmit="addUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="login">Login:</label>
                <InputText id="login" @bind-Value="newUser.login" />
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" @bind-Value="newUser.password" />
            </div>
            <div class="form-group">
                <label for="name">Name:</label>
                <InputText id="name" @bind-Value="newUser.name" />
            </div>
            <div class="form-group">
                <label for="lastname">Lastname:</label>
                <InputText id="lastname" @bind-Value="newUser.lastname" />
            </div>

            <button type="submit">Register</button>
        </EditForm>

        @if (registerError)
        {
            <div class="alert">
                Login is already taken.
            </div>
        }
        @if (registerSuc)
        {
            <div class="success-alert">
                You have successfully registered.
            </div>
        }
        @if (registerError2)
        {
            <div class="alert">
                Pole nie puste.
            </div>
        }
    </div>
</div>

@code {
    private Users newUser = new Users();
    private LoginModel loginModel = new LoginModel();
    private bool loginError = false;
    private bool registerError = false;
    private bool registerError2 = false;
    private bool isLoggedIn = false;
    private bool wrongLogin = false;
    private bool wrongPassword = false;
    private bool registerSuc = false;

    private async Task addUser()
    {
        if (string.IsNullOrEmpty(newUser.login) ||
        string.IsNullOrEmpty(newUser.password) ||
        string.IsNullOrEmpty(newUser.name) ||
        string.IsNullOrEmpty(newUser.lastname))
        {
            registerError2 = true;
            await Task.Delay(1500);
            NavMag.NavigateTo(NavMag.Uri, true);
        }



        if (registerError2 == false)
        {
            var existingUser = await DbContext.Users
                .FirstOrDefaultAsync(u => u.login == newUser.login);

            if (existingUser != null)
            {
                registerError = true;
            }
            else
            {
                DbContext.Users.Add(newUser);
                await DbContext.SaveChangesAsync();
                newUser = new Users();
                registerError = false;
                registerSuc = true;
            }
        }
        
    }
    private async Task LoginUser()
    {

        var user = await DbContext.Users
            .FirstOrDefaultAsync(u => u.login == loginModel.Login);

        if (user == null)
        {
            wrongLogin = true;
            wrongPassword = false;
            loginError = true;

        }
        else if (user.password != loginModel.Password)
        {
            wrongLogin = false;
            wrongPassword = true;
            loginError = true;
        }
        else
        {
            Session.Users = user;
            NavMag.NavigateTo(NavMag.Uri, true);
            wrongLogin = false;
            wrongPassword = false;
            loginError = false;
            isLoggedIn = true;
            
        }
    }
    public class LoginModel
    {
        public string Login { get; set; }
        public string Password { get; set; }
    }
}
