@page "/Chat"
@rendermode InteractiveServer

@using GroqApiLibrary;
@using System.Text.Json.Nodes;

<style>
    
    button {
        padding: 10px;
        background-color: #8B0000;
        color: white;
        font-size: 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        button:hover {
            background-color: #DC143C;
        }




    .page {
        position: relative;
        display: flex;
        flex-direction: column;
    }

    main {
        flex: 1;
    }

    .sidebar {
        background-image: linear-gradient(180deg, rgb(109, 5, 255) 10%, #800080 70%);
    }

    .top-row {
        background-color: #808080;
        border-bottom: 1px solid #eb6a6a;
        justify-content: flex-end;
        height: 1.5rem;
        display: flex;
        align-items: center;
    }

        .top-row ::deep a, .top-row ::deep .btn-link {
            white-space: nowrap;
            margin-left: 1.5rem;
            text-decoration: none;
        }

            .top-row ::deep a:hover, .top-row ::deep .btn-link:hover {
                text-decoration: underline;
            }

            .top-row ::deep a:first-child {
                overflow: hidden;
                text-overflow: ellipsis;
            }

</style>




<PageTitle>Chat</PageTitle>

<h1>Chat</h1>

@foreach (var message in messages)
{
    <p class="alert @(message.IsUsersMessage ? "alert-secondary" : "alert-primary")">
        @(message.IsUsersMessage ? "User" : "Chat"): @message.Message
    </p>
}

<input class="form-control" type="text" placeholder="Your message" @bind="newMessage" />
<br>
<button type="button=" @onclick="AskChat">Send</button>


@code
{
    private string newMessage = string.Empty;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string answer = string.Empty;
    public string? newPrompt;

    private static string apiKey = "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";
    private GroqApiClient groqApi = new GroqApiClient(apiKey);

    private async Task AskChat()
    {

        newPrompt = newMessage;

        if (messages != null)
        {
            newPrompt = "Here is our conversation history: ";
            foreach (var message in messages)
            {
                newPrompt += $"{message.IsUsersMessage}: {message.Message}";
            }

            newPrompt += $"Now I will send you a question. Answer that question {newMessage}";
        }

        var request = new JsonObject
            {
                ["model"] = "mixtral-8x7b-32768",
                ["messages"] = new JsonArray
            {
                new JsonObject
                {
                    ["role"] = "user",
                    ["content"] = newPrompt
                }
            }
            };

        var result = await groqApi.CreateChatCompletionAsync(request);
        answer = result?["choices"]?[0]?["message"]?["content"]?.ToString();

        messages.Add(new ChatMessage { Message = newMessage, IsUsersMessage = true });
        messages.Add(new ChatMessage { Message = answer, IsUsersMessage = false });
        newMessage = String.Empty;
        StateHasChanged();
    }
}