@page "/Chat"
@rendermode InteractiveServer

@using GroqApiLibrary;
@using System.Text.Json.Nodes;

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>

@foreach (var message in messages)
{
    <p class="alert @(message.IsUsersMessage ? "alert-secondary" : "alert-primary")">
        @(message.IsUsersMessage ? "User" : "Chat"): @message.Message
    </p>
}

<input class="form-control" type="text" placeholder="Your message" @bind="newMessage" />
<br>
<button class="btn btn-primary" type="button=" @onclick="AskChat">Send</button>


@code
{
    private string newMessage = string.Empty;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string answer = string.Empty;
    public string? newPrompt;

    private static string apiKey = "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";
    private GroqApiClient groqApi = new GroqApiClient(apiKey);

    private async Task AskChat()
    {

        newPrompt = newMessage;

        if (messages != null)
        {
            newPrompt = "Here is our conversation history: ";
            foreach (var message in messages)
            {
                newPrompt += $"{message.IsUsersMessage}: {message.Message}";
            }

            newPrompt += $"Now I will send you a question. Answer that question {newMessage}";
        }

        var request = new JsonObject
            {
                ["model"] = "mixtral-8x7b-32768",
                ["messages"] = new JsonArray
            {
                new JsonObject
                {
                    ["role"] = "user",
                    ["content"] = newPrompt
                }
            }
            };

        var result = await groqApi.CreateChatCompletionAsync(request);
        answer = result?["choices"]?[0]?["message"]?["content"]?.ToString();

        messages.Add(new ChatMessage { Message = newMessage, IsUsersMessage = true });
        messages.Add(new ChatMessage { Message = answer, IsUsersMessage = false });
        newMessage = String.Empty;
        StateHasChanged();
    }
}